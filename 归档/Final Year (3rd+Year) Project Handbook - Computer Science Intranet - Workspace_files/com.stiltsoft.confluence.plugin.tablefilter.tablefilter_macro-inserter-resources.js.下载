WRMCB=function(e){var c=console;if(c&&c.log&&c.error){c.log('Error running batched script.');c.error(e);}}
;
try {
/* module-key = 'com.stiltsoft.confluence.plugin.tablefilter.tablefilter:macro-inserter-resources', location = 'soy/macro-inserter.soy' */
// This file was automatically generated from macro-inserter.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace TFInserterTamplate.
 */

if (typeof TFInserterTamplate == 'undefined') { var TFInserterTamplate = {}; }


TFInserterTamplate.panel = function(opt_data, opt_ignored) {
  return '<div class="tfac-macro-inserter">' + ((opt_data.showTF) ? '<span class="aui-icon aui-icon-small table-filter-inserter" title="' + soy.$$escapeHtml("Filter table data") + '" data-macro="table-filter"></span>' : '') + ((opt_data.showPivot) ? '<span class="aui-icon aui-icon-small pivot-table-inserter" title="' + soy.$$escapeHtml("Create a pivot table") + '" data-macro="pivot-table"></span>' : '') + ((opt_data.showChart) ? '<span class="aui-icon aui-icon-small table-chart-inserter" title="' + soy.$$escapeHtml("Create a chart from data series") + '" data-macro="table-chart"></span>' : '') + '<a target="_blank" ' + ((opt_data.isAdmin) ? ' href="' + soy.$$escapeHtml("") + '/admin/plugins/tfac/config.action" ' : ' href="' + soy.$$escapeHtml("") + '/users/tfac-settings.action" ') + '><span class="aui-icon aui-icon-small aui-iconfont-configure" title="' + soy.$$escapeHtml("Configure visibility") + '"></span></a></div>';
};
if (goog.DEBUG) {
  TFInserterTamplate.panel.soyTemplateName = 'TFInserterTamplate.panel';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'com.stiltsoft.confluence.plugin.tablefilter.tablefilter:macro-inserter-resources', location = 'js/macro-inserter.js' */
(function($) {

    var TFACInserter = {

        macrosWithBody: ['json-table', 'csv', 'vote', 'survey', 'report-table'],

        init: function () {
            var self = this;
            self.content = $('#main-content');
            self.tables = self.content.find('table');

            self.tables.each(function () {
                self.initTable($(this));
            });

            self.content.delegate('table', 'mouseover.tf-init', function () {
                var table = $(this);
                table.undelegate('mouseover.tf-init');
                if (self.tables.index(table) === -1) {
                    self.initTable(table);
                }
            });
        },

        initTable: function (table) {
            var self = TFACInserter;

            if (table.parents('.quiz-settings-content, .code').length) return;

            var hasTF = table.parents('.tablefilter-outer-wrapper').length > 0;
            var hasPivot = table.parents('.pivot-content').length > 0;
            var hasChart = table.parents('.table-chart-contents').length > 0;

            if (!hasTF || !hasPivot || !hasChart) {
                table.bind('mouseover.tf', function() {
                    clearTimeout(self.timer);

                    if (!table.is(self.activeTable)) {
                        self.timer = setTimeout(function() {
                            if (self.panel) {
                                self.panel.remove();
                            }

                            self.activeTable = table;

                            self.panel = $(TFInserterTamplate.panel({showTF: !hasTF, showPivot: !hasPivot, showChart: !hasChart, isAdmin: AJS.params.isConfluenceAdmin}));
                            self.content.append(self.panel);

                            var offset = table.offset();
                            var parent = table.parent();
                            self.panel.offset({top: offset.top, left: Math.max(offset.left, parent.offset().left) + Math.min(table.width(), parent.width()) + 5});

                            self.bindPanel({hasTF: hasTF, hasPivot: hasPivot, hasChart: hasChart, table: table});

                            table.unbind('mouseleave.tf').bind('mouseleave.tf', self.removePanel);
                        }, 150);
                    }
                });
            }
        },

        bindPanel: function (params) {
            var self = TFACInserter;

            self.panel.bind('mouseenter.tf', function() {
                clearTimeout(self.timer);
            }).bind('mouseleave.tf', self.removePanel);

            self.panel.children('span').click(function () {
                if (self.panel.hasClass('disabled')) return;

                self.panel.addClass('disabled');
                var btn = $(this);
                var macroName = btn.data('macro');
                var containerType;
                var container;
                var number;
                var tableNumber = -1;

                if (params.hasTF && params.hasPivot) {
                    params.hasTF = params.table.parents('.tablefilter-outer-wrapper, .pivot-content').last().hasClass('tablefilter-outer-wrapper');
                }

                if (params.hasTF) {
                    containerType = 'macro';
                    container = 'table-filter';
                    var tf = params.table.parents('.tablefilter-outer-wrapper');
                    number = self.content.find('.tablefilter-outer-wrapper').index(tf);
                } else if (params.hasPivot) {
                    if (macroName === 'table-filter' && params.table.parents('.original-table').length) {
                        containerType = 'macro-body';

                    } else {
                        containerType = 'macro';
                    }
                    container = 'pivot-table';
                    var pivot = params.table.parents('.pivot-content');
                    number = self.content.find('.pivot-content').index(pivot);
                } else if (params.hasChart) {
                    containerType = 'macro-body';
                    container = 'table-chart';
                    var chart = params.table.parents('.table-chart-contents');
                    number = self.content.find('.table-chart-contents').index(chart);
                } else {
                    var wrapperMacro = params.table.parents('.conf-macro, .jira-table').eq(0);
                    if (params.table.hasClass('conf-macro')) {
                        containerType = 'macro';
                        container = params.table.data('macro-name');
                        number = self.content.find('[data-macro-name="' + container + '"]').index(params.table);
                    } else if (wrapperMacro.length) {
                        if (wrapperMacro.hasClass('jira-table')) {
                            container = 'jira';
                            number = self.content.find('.jira-table').index(wrapperMacro);
                        } else {
                            container = wrapperMacro.data('macro-name');
                            number = self.content.find('[data-macro-name="' + container + '"]').index(wrapperMacro);
                        }
                        if (wrapperMacro.attr('data-hasbody') === 'true' && self.macrosWithBody.indexOf(container) === -1) {
                            containerType = 'macro-body';
                            tableNumber = wrapperMacro.find(':not(.conf-macro) table').index(params.table);
                        } else {
                            containerType = 'macro';
                        }
                    } else if (params.table.hasClass('appfire-table-plus-parms')) {
                        containerType = 'macro';
                        container = 'json-table|csv';
                        number = self.content.find('div.table-wrap > table.confluenceTable.appfire-table-plus-parms').filter(function () {
                            return $(this).parents('.conf-macro').length === 0;
                        }).index(params.table);

                    } else {
                        containerType = 'table';
                        number = self.content.find('div.table-wrap > table.confluenceTable:not(.appfire-table-plus-parms)').filter(function () {
                            return $(this).parents('.conf-macro').length === 0;
                        }).index(params.table);
                    }
                }

                $.ajax({
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    type: 'POST',
                    async: false,
                    cache: false,
                    url: Confluence.getContextPath() + '/rest/table-filter/1.0/service/insert',
                    dataType: 'json',
                    data: {
                        pageId: AJS.params.contentId,
                        pageVersion: $('meta[name="page-version"]').attr('content'),
                        macroName: macroName,
                        containerType: containerType,
                        container: container,
                        number: number,
                        tableNumber: tableNumber
                    },
                    success: function () {
                        location.reload();
                    },
                    error: function (xhr) {
                        var isReadOnly = xhr.responseText.indexOf('com.atlassian.confluence.api.service.exceptions.ReadOnlyException') !== -1;
                        var messageContainer = $('<div id="tfac-inserter-message"></div>');
                        self.content.append(messageContainer);
                        AJS.messages.error(messageContainer, {
                            body: isReadOnly ? "This Confluence site is temporarily in the read-only mode. You cannot make any changes right now." : "Oops! It seems that the macro cannot be added. Please edit the page and add this macro",
                            closeable: true
                        });
                        setTimeout(function () {
                            messageContainer.remove();
                        }, 5000);
                        self.panel.removeClass('disabled');
                    }
                });
            })
        },

        removePanel: function() {
            var self = TFACInserter;

            clearTimeout(self.timer);

            self.timer = setTimeout(function() {
                self.activeTable = null;
                if (self.panel) {
                    self.panel.fadeOut(50, function(){
                        self.panel.remove();
                        self.panel = null;
                    });
                }
            }, 300);
        }
    };

    AJS.toInit(function() {
        if ($('#editPageLink').length) {
            TFACInserter.init();
        }
    });

})(AJS.$);



}catch(e){WRMCB(e)};